#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hackathon-uop:server');
var http = require('http');

var scores = require('../models/scores');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var clientID = 0;
var io = require('socket.io')(server);

io.on('connection', function(socket){
  clientID++;

  // to init client
  socket.emit('init', {"clientID": 'client_' + clientID});
  // from init client
  socket.on('init_toServer', function(data){

    if(data.clientID == -1){
      scores.getAllData(data.clientID);
    } else {
      console.log('client connected on simulator..' + 'client_' + data.clientID);

      var sending_data = scores.getScores(data.clientID);
      socket.emit('init_confirm', sending_data);

      console.log(sending_data);
    }

  });
  socket.on('scoreUpdate', function(data){

    console.log('score update from ' + data.clientID);
    scores.setScores(data.clientID, data.scores);

    // console.log(scores.getScores(data.clientID)[0].scores);

    io.emit('overall_avg_array', scores.getAverage());

  });

  socket.on('disconnect', function(){
    console.log('user disconnected.. ');
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
